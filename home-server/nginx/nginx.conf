# Hosts:
# 32792/tcp: Reverse proxy for local syncthing GUI on home-server
# 8080/tcp: Dynamic reverse proxy pacman cache for home-server on local network

# https://docs.syncthing.net/users/reverseproxy.html
# https://docs.syncthing.net/users/faq.html#why-do-i-get-host-check-error-in-the-gui-api
# https://wiki.archlinux.org/title/Pacman/Tips_and_tricks#Dynamic_reverse_proxy_cache_using_nginx

worker_processes  1;

events {
    worker_connections  1024;
}

http {
    include mime.types;
    default_type application/octet-stream;

    sendfile on;

    keepalive_timeout  65;

    types_hash_max_size 4096;
    server_names_hash_bucket_size 128;

    # nginx may need to resolve domain names at run time
    # use local unbound on router
    resolver 192.168.1.1 ipv6=off;

    # Syncthing
    server
    {
        listen 32792;
        server_name 192.168.1.2;
        location /syncthing/ {
            proxy_set_header Host localhost;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_pass http://localhost:8384/;

            proxy_read_timeout 600s;
            proxy_send_timeout 600s;
        }
    }

    # Pacman Cache
    server
    {
        listen 8080;
        server_name 192.168.1.2;
        root /var/lib/nginx-pacman-cache;
        autoindex on;

        # Special rules for krathalan repo
        location ~ /krathalan/.*\.(db|sig|files)$ {
            proxy_pass https://builds.krathalan.net$request_uri;
        }
        location ~ /krathalan/.*\.tar\.(xz|zst)$ {
            proxy_store on;
            proxy_redirect off;
            proxy_store_access user:rw group:rw all:r;
            proxy_next_upstream error timeout http_404;
            proxy_pass https://builds.krathalan.net$request_uri;
        }


        # Requests for package db, signature files and files db should redirect upstream without caching
        location ~ \.(db|sig|files)$ {
            proxy_pass http://mirrors$request_uri;
        }

        # Requests for actual packages should be served directly from cache if available.
        #   If not available, retrieve and save the package from an upstream mirror.
        location ~ \.tar\.(xz|zst)$ {
            try_files $uri @pkg_mirror;
        }

        # Retrieve package from upstream mirrors and cache for future requests
        location @pkg_mirror {
            proxy_store on;
            proxy_redirect off;
            proxy_store_access user:rw group:rw all:r;
            proxy_next_upstream error timeout http_404;
            proxy_pass http://mirrors$request_uri;
        }
    }

    # Upstream Arch Linux Mirrors
    # - Configure as many backend mirrors as you want in the blocks below
    # - Servers are used in a round-robin fashion by nginx
    # - Add "backup" if you want to only use the mirror upon failure of the other mirrors
    # - Use separate mirror server blocks to be able to use mirrors that have different paths to the package repos
    upstream mirrors {
        server 127.0.0.1:8001;
        server 127.0.0.1:8002 backup;
        server 127.0.0.1:8003 backup;
    }

    # If you want to use an official mirror from /etc/pacman.d/mirrorlist like
    # http://mirror.domain.example/path/to/repo/$repo/os/$arch
    #
    # the proxy_pass directive should look like this
    # proxy_pass http://mirror.domain.example/path/to/repo$request_uri;
    #
    # Notice that $request_uri replaces the /$repo/os/$arch part of
    # the mirror address. See more examples below.

    server
    {
        listen 127.0.0.1:8001;
        location / {
            proxy_pass https://mirror.f4st.host/archlinux$request_uri;
        }
    }
    server
    {
        listen 127.0.0.1:8002;
        location / {
            proxy_pass https://mirror.theo546.fr/archlinux$request_uri;
        }
    }
    server
    {
        listen 127.0.0.1:8003;
        location / {
            proxy_pass https://de.arch.mirror.kescher.at$request_uri;
        }
    }
}
